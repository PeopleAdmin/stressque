#!/usr/bin/env ruby
$stdout.sync = true
require 'resque'

# Load resque-clues if its available to be able to
# analyze the throughput, otherwise fail silently.
begin
  require 'resque-clues'
  Resque::Plugins::Clues.event_publisher = \
    Resque::Plugins::Clues::NoOpPublisher.new
rescue LoadError
end

require 'text-table'

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
require 'stressque/cli'

cli = Stressque::CLI.new
cli.parse_options
Resque.redis = cli.config[:redis] if cli.config[:redis]

require 'stressque'

begin
  harness = Stressque::DSL.eval_file(cli.config[:config])
rescue StandardError => e
  $stderr.write("Error parsing #{cli.config[:config]} - #{e}\n")
  exit(-1)
end
harness.freeze_classes!

injector = Stressque::Injector.new(harness)
sampler = Stressque::Sampler.new(harness, injector, 3)
sampler.stat_handler = Proc.new do |*row|
  table = Text::Table.new
  table.head = %w{time target_rate current_rate total_injections}
  table.rows << row
  puts table
end

injector_pid = fork do
  puts "Running the injector (#{$$})"
  injector.run
  puts "Exiting the injector"
end

Signal.trap("INT") do
  puts "Exiting sampler(#{$$}) and injector(#{injector_pid})"
  Process.kill("INT", injector_pid)
  Kernel.exit(0)
end

Signal.trap("TERM") do
  puts "Exiting sampler(#{$$}) and injector(#{injector_pid})"
  Process.kill("TERM", injector_pid)
  Kernel.exit(0)
end

puts "Running the sampler (#{$$})"
sampler.run
puts "Exiting the sampler"
